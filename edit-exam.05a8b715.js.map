{"mappings":"AAIA,IAAIA,EAAkB,GAyGtB,SAASC,IACP,MAAMC,EAAc,IAAIC,KAClBC,EAAU,IAAID,KAAKE,SAASC,SAGlC,GAAIJ,EAAcE,EAAS,CACzB,MAAMG,EAAWH,EAAUF,EACrBM,EAAUC,KAAKC,MAAMH,EAAY,IAAQ,IACzCI,EAAUF,KAAKC,MAAMH,EAAY,IAAO,GAAM,IAC9CK,EAAQH,KAAKC,MAAMH,EAAY,IAAO,KAAQ,IAC9CM,EAAOJ,KAAKC,MAAMH,EAAY,OAGfO,SAASC,eAAe,iBAGhCC,UAAY,mBAAmBH,WAAcD,YAAgBD,cAAoBH,W,KACzF,CAEgBM,SAASC,eAAe,iBAGhCC,UAAY,kC,EA7H7BF,SAASG,iBAAiB,oBAAoB,KAC5CC,MAAM,uCAAqB,CACzBC,OAAQ,QAEPC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,GAGV,SAAsBC,GAEpB,MAAMC,EAAeX,SAASY,yBACxBC,EAAWb,SAASC,eAAe,YACnCa,EAAiBd,SAASe,cAAc,SAE9CD,EAAeE,aAAa,OAAQ,UAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAKQ,UAAUC,OAAQF,IAAK,CAE9C,MAAMG,EAAgBV,EAAKQ,UAAUD,GAAGI,SAClCC,EAAcZ,EAAKQ,UAAUD,GAAGM,QAGhCC,EAAWxB,SAASe,cAAc,YAGxC,IAAIU,EAASzB,SAASe,cAAc,UACpCU,EAAOvB,UAAYkB,EACnBT,EAAae,YAAYD,GAGzBD,EAASR,aAAa,KAAM,WAAWC,EAAI,KAE3C,IAAIU,EAAiB,GAGrB,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAKQ,UAAUD,GAAGM,QAAQJ,OAAQS,IAAK,CACzD,IAAIC,EAAQ7B,SAASe,cAAc,SACnCc,EAAMb,aAAa,KAAM,IAAIC,EAAI,KAAKW,EAAI,KAC1CC,EAAMb,aAAa,OAAQ,SAC3Ba,EAAMb,aAAa,OAAQ,IAAIC,KAE/B,IAAIa,EAAQ9B,SAASe,cAAc,SACnCe,EAAMd,aAAa,MAAO,IAAIC,EAAI,KAAKW,EAAI,KAE3CE,EAAM5B,UAAYoB,EAAYM,GAAGG,OACjCC,SAAWV,EAAYM,GAAGK,GAE1BtB,EAAae,YAAYG,GACzBlB,EAAae,YAAYI,GAEzBH,EAAeO,KAAK,CAClBL,MAAOA,EACPC,MAAOA,EACPE,SAAUA,U,CAId9C,EAAgBgD,KAAKP,GAGrBd,EAASa,YAAYF,GAAUE,YAAYf,E,CAG7CE,EAASa,YAAYZ,E,CA1DLqB,CAAa1B,IAAM,IA6DrCT,SAASC,eAAe,YAAYE,iBAAiB,UAAUiC,IAC7DA,EAAMC,iBAEN,MAAMC,EAAoB,GACpBC,EAAsB,GAE5B,IAAK,IAAItB,EAAI,EAAGA,EAAIP,KAAKQ,UAAUC,OAAQF,IAAK,CAC9CsB,EAAoBL,KAAKxB,KAAKQ,UAAUD,GAAGgB,IAE3C,MAAMO,EAAoBtD,EAAgB+B,GAAGwB,MAC3CC,IAAqC,IAA1BA,EAAQb,MAAMc,UAGtBH,EAIHF,EAAkBJ,KAAKM,EAAkBR,UAFzCM,EAAkBJ,KAAKxB,KAAKQ,UAAUD,GAAGM,QAAQ,GAAGU,G,CAMxD,MAAMW,EAAa,CACjBC,UAAW,GACXtB,QAAS,IAGX,IAAK,IAAIuB,EAAI,EAAGA,EAAIP,EAAoBpB,OAAQ2B,IAC9CF,EAAWC,UAAUX,KAAKK,EAAoBO,IAC9CF,EAAWrB,QAAQW,KAAKI,EAAkBQ,IAG5CC,QAAQC,IAAIJ,EAAW,IAiCzBzD,IAGA8D,YAAY9D,EAAqB","sources":["src/js/components/front-exam.js"],"sourcesContent":["import { baseURL } from '../index';\n\n// Exam answers array\n\nlet formExamAnswers = [];\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  fetch(baseURL + '/exam/1', {\n    method: 'GET',\n  })\n    .then(response => response.json())\n    .then(body => populateExam(body));\n});\n\nfunction populateExam(exam) {\n  // Create document fragment for the questions and the answers to be imported efficiently (all at once for each question)\n  const fieldsetFrag = document.createDocumentFragment();\n  const formExam = document.getElementById('formExam');\n  const formSubmitExam = document.createElement('input');\n\n  formSubmitExam.setAttribute('type', 'submit');\n\n  for (let i = 0; i < exam.exercises.length; i++) {\n    // Get the arrays of Qs and As\n    const examQuestions = exam.exercises[i].question;\n    const examAnswers = exam.exercises[i].answers;\n\n    // Add exercise base\n    const fieldset = document.createElement('fieldset');\n\n    // Add the Q\n    let legend = document.createElement('legend');\n    legend.innerText = examQuestions;\n    fieldsetFrag.appendChild(legend);\n\n    // Number the question\n    fieldset.setAttribute('id', `question${i + 1}`);\n\n    let currentAnswers = [];\n\n    // Add the As to the Qs\n    for (let j = 0; j < exam.exercises[i].answers.length; j++) {\n      let input = document.createElement('input');\n      input.setAttribute('id', `q${i + 1}a${j + 1}`);\n      input.setAttribute('type', 'radio');\n      input.setAttribute('name', `q${i}`);\n\n      let label = document.createElement('label');\n      label.setAttribute('for', `q${i + 1}a${j + 1}`);\n\n      label.innerText = examAnswers[j].answer;\n      answerId = examAnswers[j].id;\n\n      fieldsetFrag.appendChild(input);\n      fieldsetFrag.appendChild(label);\n\n      currentAnswers.push({\n        input: input,\n        label: label,\n        answerId: answerId,\n      });\n    }\n\n    formExamAnswers.push(currentAnswers);\n\n    // Put the fragment together at once\n    formExam.appendChild(fieldset).appendChild(fieldsetFrag);\n  }\n\n  formExam.appendChild(formSubmitExam);\n}\n\ndocument.getElementById('formExam').addEventListener('submit', event => {\n  event.preventDefault();\n\n  const examOutputAnswers = [];\n  const examOutputQuestions = [];\n\n  for (let i = 0; i < exam.exercises.length; i++) {\n    examOutputQuestions.push(exam.exercises[i].id);\n\n    const findCorrectAnswer = formExamAnswers[i].find(\n      element => element.input.checked === true\n    );\n\n    if (!findCorrectAnswer) {\n      // Auto-choose the first answer if none is selected\n      examOutputAnswers.push(exam.exercises[i].answers[0].id);\n    } else {\n      examOutputAnswers.push(findCorrectAnswer.answerId);\n    }\n  }\n\n  const examOutput = {\n    questions: [],\n    answers: [],\n  };\n\n  for (let i = 0; i < examOutputQuestions.length; i++) {\n    examOutput.questions.push(examOutputQuestions[i]);\n    examOutput.answers.push(examOutputAnswers[i]);\n  }\n\n  console.dir(examOutput);\n});\n\n// Timer Function\n\n// Function to calculate remaining time and update HTML element\nfunction updateRemainingTime() {\n  const currentDate = new Date(); // Current date and time\n  const endDate = new Date(examData.endTime); // End date and time\n\n  // Check if the current date is before the end date\n  if (currentDate < endDate) {\n    const timeDiff = endDate - currentDate; // Difference in milliseconds\n    const seconds = Math.floor((timeDiff / 1000) % 60);\n    const minutes = Math.floor((timeDiff / 1000 / 60) % 60);\n    const hours = Math.floor((timeDiff / 1000 / 3600) % 24);\n    const days = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n    // Get the HTML element by its ID\n    const timerElement = document.getElementById('remainingTime');\n\n    // Update the inner text of the HTML element\n    timerElement.innerText = `Remaining Time: ${days} days, ${hours} hours, ${minutes} minutes, ${seconds} seconds`;\n  } else {\n    // Get the HTML element by its ID\n    const timerElement = document.getElementById('remainingTime');\n\n    // Update the inner text of the HTML element for the case where the end date has passed\n    timerElement.innerText = 'The end date has already passed.';\n  }\n}\n\n// Call the function initially\nupdateRemainingTime();\n\n// Update the remaining time every second (adjust the interval as needed)\nsetInterval(updateRemainingTime, 1000);\n"],"names":["$c0a9db83ec0b3864$var$formExamAnswers","$c0a9db83ec0b3864$var$updateRemainingTime","currentDate","Date","endDate","examData","endTime","timeDiff","seconds","Math","floor","minutes","hours","days","document","getElementById","innerText","addEventListener","fetch","method","then","response","json","body","exam","fieldsetFrag","createDocumentFragment","formExam","formSubmitExam","createElement","setAttribute","i","exercises","length","examQuestions","question","examAnswers","answers","fieldset","legend","appendChild","currentAnswers","j","input","label","answer","answerId","id","push","$c0a9db83ec0b3864$var$populateExam","event","preventDefault","examOutputAnswers","examOutputQuestions","findCorrectAnswer","find","element","checked","examOutput","questions","i1","console","dir","setInterval"],"version":3,"file":"edit-exam.05a8b715.js.map"}